local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "N·ªìi c√°m h·ª£iü§ë",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "„Ää„Ää„Ää ƒêANG LOAD „Äã„Äã„Äã",
   LoadingSubtitle = "script beta by S",
   Theme = "Default", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Pig's food hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = true, -- Set this to true to use our key system
   KeySettings = {
      Title = "H·ªèi dev ƒëi",
      Subtitle = "Key Systemü§ë",
      Note = "No method of obtaining the key is provided ·ª≥e yeah", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Sown123"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local players = game:GetService("Players")
local wrk = game:GetService("Workspace")
local plr = players.LocalPlayer
local hrp = plr.Character:FindFirstChild("HumanoidRootPart")
local humanoid = plr.Character:FindFirstChild("Humanoid")

local function onCharacterAdded(character)
    hrp = character:WaitForChild("HumanoidRootPart")
    humanoid = character:WaitForChild("Humanoid")
end

plr.CharacterAdded:Connect(onCharacterAdded)

if plr.Character then
    onCharacterAdded(plr.Character)
end

local tab1 = Window:CreateTab("local playerüî•")

local isFlying = false

local tog1 = tab1:CreateToggle({
     Name = "Enable/Disable fly"
     CurrentValue = false,
     Flag = "FlyToggle",
     Callback = function(Value)
        toggleFly(Value)
    end,
})

local function toggleFly(state)
    isFlying = state
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()

    if state then
        -- K√≠ch ho·∫°t fly
        local humanoid = character:WaitForChild("Humanoid")
        humanoid.PlatformStand = true
        local flyPart = Instance.new("BodyVelocity", character.PrimaryPart)
        flyPart.Velocity = Vector3.new(0, 50, 0) -- Bay l√™n
        flyPart.MaxForce = Vector3.new(100000, 100000, 100000)
        flyPart.Name = "FlyVelocity"
    else
        -- T·∫Øt fly
        local flyVelocity = character.PrimaryPart:FindFirstChild("FlyVelocity")
        if flyVelocity then
            flyVelocity:Destroy()
        end
        local humanoid = character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid.PlatformStand = false
        end
    end
end

